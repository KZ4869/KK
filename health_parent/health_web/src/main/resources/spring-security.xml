<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--静态资源-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>
    <!--拦截规则-->
    <security:http auto-config="true" use-expressions="true">
        <!--登录后才可以访问系统 表示都可以 使用细颗粒拦截-->
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <!--  frame 前端中的页面嵌套规则  嵌套的页面与本网站同源     -->
        <security:headers>
            <!--
             frame-options 控制页面中嵌套frame（访问其它页面，把其它页面的内容展示在这个页面上)
             policy 使用的策略:
             DENY: 不允许访问
             SAMEORIGIN: 同域可以访问
             ALLOW-FROM: 指定url可以访问
            -->
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>
        <security:form-login
                login-page="/login.html"
                login-processing-url="/login.do"
                username-parameter="username"
                password-parameter="password"
                default-target-url="/pages/main.html"
                authentication-failure-url="/fail.html"
                always-use-default-target="true"/>
        <!--登录配置-->
        <!--自定义登录页 要关闭跨域-->
        <security:csrf disabled="true"/>
        <!--退出配置-->
        <security:logout logout-success-url="/login.html" invalidate-session="true" logout-url="/logout.do"/>
    </security:http>

    <!--认证管理器-->
    <security:authentication-manager>
        <!--登录用户信息提供者 -->
        <!--报红 没有关系 加载的时候会加载bean对象-->
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--使用加密-->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!--开启注解权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>